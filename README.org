#+title: Common Lisp: Numerical and Scientific Computing - Call for Needs

There are numerous numerical and scientific computing libraries in Common Lisp - the [[https://github.com/CodyReichert/awesome-cl?tab=readme-ov-file#numerical-and-scientific][awesome-cl]] list is given [[id:awesome-cl-list][below]]. And yet, it always feels insufficient.

The following repository is an effort to consolidate the needs of multiple individuals and organizations who are using or want to use Common Lisp to meet their numerical and scientific (numsci) computing needs. To contribute, simply create an [[https://github.com/digikar99/common-lisp-numsci-call-for-needs/issues][issue]] with the following details:

1. What problems or end-goals do you plan to use the numsci ecosystem for? Examples may include: graphics, physics, biology, etc. Try to be specific, but if it's difficult to be specific because, say, you are still in an exploratory phase, that's okay.
2. What current libraries from those listed [[id:awesome-cl-list][below]] are the closest to meeting your needs?
3. What non-lisp libraries and framework do you think are the closest to meeting your needs?
4. Do you think your needs can be met by a thin CFFI wrapper around the foreign libraries? Did you try [[https://github.com/rpav/cl-autowrap][cl-autowrap]]? If you tried cl-autowrap but ran into difficulties, could you describe the issues you faced?
5. What problems do you face while using the lisp numsci libraries, and what is your wish-list for them? When was the last time you wanted to drop Common Lisp in favour of another ecosystem? What made you want to switch, what made you stick?
6. Any other details you wish to provide.

The issues may eventually be consolidated into this README by issuing [[https://github.com/digikar99/common-lisp-numsci-call-for-needs/pulls][Pull requests]]. If you feel the consolidation process can be improved in some way, feel free to create an issue for that too, and tag it as Meta.

* awesome-cl list

Source:  [[https://github.com/CodyReichert/awesome-cl?tab=readme-ov-file#numerical-and-scientific][awesome-cl]]

** Machine Learning

- [[https://github.com/melisgl/mgl][MGL]] - a machine learning library
  for backpropagation neural networks, boltzmann machines, gaussian
  processes and more. [MIT][200].

  - some parts originally contributed by Ravenpack International.
  - used by its [[https://github.com/melisgl][author]] to
    [[https://github.com/melisgl/higgsml][win]] the Higgs Boson Machine
    Learning Challenge.
  - more about the author: he also won the Google
    [[https://en.wikipedia.org/wiki/AI_Challenge][AI Challenge]] in 2010
    using Common Lisp, but without MGL, as no machine learning was
    needed. A [[https://www.youtube.com/watch?v=7sgERtZkycU][related
    talk]] (59', 2013).

- [[https://github.com/mmaul/clml][clml]] - originally developed by
  Mathematicl Systems Inc., a Japanese company. With a
  [[https://mmaul.github.io/clml.tutorials//2015/08/08/CLML-Time-Series-Part-1.html][tutorial]].
  [LLGPL][8].
- [[https://www.common-lisp.net/project/antik/][antik]] - a foundation
  for scientific and engineering computation in Common Lisp. GPL. Also
  [[https://github.com/melisgl/mgl-mat][mgl-mat]] and
  [[https://github.com/tpapp/lla][LLA]].




** Numerical and Scientific
:PROPERTIES:
:ID: awesome-cl-list
:END:

- ‚≠ê [[http://maxima.sourceforge.net/][maxima]] - Computer Algebra
  System. [GNU GPL3][2].

  - [[https://wxmaxima-developers.github.io/wxmaxima/][wxMaxima]]: a
    graphical frontend.
  - [[https://play.google.com/store/apps/details?id=jp.yhonda][Maxima on
    Android]], built with ECL.
  - [[https://github.com/robert-dodier/maxima-jupyter][Maxima on
    Jupyter]]
  - it can be used via [[https://www.sagemath.org/][SageMath]] and
    [[https://apps.kde.org/cantor/][KDE Cantor]]. Of course, with Emacs:
    [[https://gitlab.com/sasanidas/maxima][maxima-mode]]
    ([[https://community.linuxmint.com/img/screenshots/maxima-emacs.png][screenshot]])
    and [[https://github.com/jmbr/maxima-interface][maxima-interface]]
    to ease the interface between Maxima and Common Lisp.
  - it can be used
    [[https://mahmoodsheikh36.github.io/post/20230510181916-maxima_in_lisp/][from
    a Lisp REPL]].

- [[https://github.com/numcl/numcl][numcl]] - Numpy clone in Common
  Lisp. [LGPL3][9].
- [[https://common-lisp.net/project/gsll/][GSLL]] - GNU Scientific
  Library for Lisp; allows the use of the GSL from Common Lisp. [GNU
  LGPL2.1][11].
- [[https://github.com/pkhuong/Xecto][Xecto]] - A library for regular
  array parallelism. [3-clause BSD][15].
- [[https://github.com/marcoheisig/Petalisp][Petalisp]] - an attempt to
  generate high performance code for parallel computers by JIT-compiling
  array definitions. It works on a more fundamental level than NumPy, by
  providing even more powerful N-dimensional arrays, but just a few
  building blocks for working on them. [AGPL-3.0][agpl3].
- [[https://github.com/ghollisjr/cl-ana][cl-ana]] - Common Lisp data
  analysis library with emphasis on modularity and conceptual clarity.
  It aims to be a general purpose framework for analyzing small and
  large scale datasets, including binned data analysis and
  visualization. [GNU GPL3][2].
- [[https://neil-lindquist.github.io/linear-programming/][linear-programming]]
  -- a library for solving linear programming problems. [MIT][200].
- [[https://github.com/takagi/avm][avm]] - Efficient and expressive
  arrayed vector math library with multi-threading and CUDA support.
  [MIT][200].
- [[https://github.com/bendudson/array-operations][array-operations]] -
  a collection of functions and macros for manipulating Common Lisp
  arrays and performing numerical calculations with them. [MIT][200].
- [[https://github.com/Ramarren/cl-geometry/][cl-geometry]] - a system
  for two dimensional computational geometry for Common Lisp.
  [MIT][200].
- [[https://github.com/sirherrbatka/vellum][Vellum]] - Data Frames for
  Common Lisp. BSD_2Clause.
- [[https://github.com/cbaggers/rtg-math/][rtg-math]] - a selection of
  the math routines most commonly needed for making realtime graphics in
  lisp (2, 3 and 4 component vectors, 3x3 and 4x4 matrices, quaternions,
  spherical and polar coordinates). BSD_2Clause.
- [[https://github.com/mfiano/origin][origin]] - A native Lisp graphics
  math library with an emphasis on performance and correctness.
  Includes: vectors, matrices (up to 4x4), quaternions,
  single/double-float support, destructive/non-destructive operations,
  shaping & intersections. [MIT][200].

*** Matrix libraries
   :PROPERTIES:
   :CUSTOM_ID: matrix-libraries
   :END:

- [[https://github.com/quil-lang/magicl][magicl]] - Matrix Algebra
  proGrams In Common Lisp based on BLAS/LAPACK and Expokit, by Rigetti
  Computing. [BSD_3Clause][15].
- [[https://github.com/blindglobe/lisp-matrix][lisp-matrix]] - A matrix
  package. [FreeBSD][39].
- [[https://shinmera.github.io/3d-matrices][3d-matrices]] - A library
  implementing common matrix calculations, with an emphasis on 2x2,3x3,
  and 4x4 matrices as commonly used in graphics. It provides some
  numerical functions as well, but those are not the focus. The library
  is heavily optimised, so it is not made of pretty code. [zlib][33].
- [[https://github.com/slyrus/clem][clem]] - a matrix library.
  [BSD_2Clause][17].

*** Statistics
   :PROPERTIES:
   :CUSTOM_ID: statistics
   :END:

- [[https://github.com/lisp-stat][lisp-stat]] - an environment for
  statistical computing, conceptually similar to R, that is also
  suitable for front-line production deployments. "It grew out of a
  desire to have an environment for rapidly prototyping analytical and
  A.I. solutions, and move directly to production environments with
  minimal friction."

  - https://lisp-stat.dev/
  - ships Luke Tierney's
    [[https://homepage.stat.uiowa.edu/~luke/xls/xlsinfo/][XLisp-Stat]]
    (a predecessor of R) as well as newer libraries.

- [[https://github.com/blindglobe/common-lisp-stat/][common-lisp-stat]] -
  Common Lisp statistics library. [FreeBSD][39].

*** Units
   :PROPERTIES:
   :CUSTOM_ID: units
   :END:

- [[https://github.com/mrossini-ethz/physical-quantities][physical-quantities]] -
  a library that provides a numeric type with optional unit and/or
  uncertainty for computations with automatic error propagation. GPL2

*** Utils
   :PROPERTIES:
   :CUSTOM_ID: utils
   :END:

- [[https://github.com/rigetti/cmu-infix][cmu-infix]] - A library for
  writing infix mathematical notation in Common Lisp. See also
  [[https://github.com/mrcdr/polisher][polisher]].
